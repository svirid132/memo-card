{"version":3,"sources":["features/counter/Counter.module.css","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","assets/card.jpg","components/Card/CardLoader.jsx","components/Card/Card.jsx","components/Status/Status.jsx","components/Navigation/Navigation.jsx","components/FieldGame/FieldGame.jsx","components/Description.jsx","components/Finish.jsx","pages/Game.jsx","pages/randomizer.js","pages/MenuGame.jsx","App.js","components/Card/loadInfo.js","components/Card/cardSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","CardLoader","style","speed","backgroundColor","foregroundColor","width","height","borderRadius","x","y","rx","ry","Card","forwardRef","ref","className","image","isErrorImage","isView","isViewFront","onClickForScore","onClickForDescription","dataPositonForImg","useState","isImageError","setIsImgError","isLoad","setIsLoad","isClickable","setIsClickable","useEffect","cardRef","useRef","clsx","CSSTransition","in","timeout","enter","exit","classNames","enterDone","exitActive","exitDone","onExit","onClick","src","cardBackground","alt","display","url","elem","onload","onerror","defaultProps","memo","StatusUser","score","currentUser","Status","users","currentUserIndex","lastPicture","userElems","map","user","index","currentPoints","allPoints","Navigation","currentPage","length","items","Array","fill","itemElems","item","to","FieldGame","onMiddleClickForScore","onMiddleClickForDescription","viewDescription","cardElems","id","description","imageUrl","Description","title","dangerouslySetInnerHTML","__html","Finish","initCardsState","cardLength","fieldLength","arr","randIdArr","idArr","i","push","numRange","selectIndex","Math","floor","random","selectNum","splice","randomaizer","fieldArr","pathArr","FieldGamePage","setItems","selectCards","setSelectCards","isClickCard","setIsClickCard","setDescription","pageNum","useParams","pathItems","newPathItems","innerIndex","newItem","Object","assign","newSelectCards","newItems","descriptionObj","Game","location","useLocation","names","setCurrentPage","_userNames","scoreLength","userNames","key","initScores","scores","setScores","descriptionRef","navigationRef","objImgs","objTexts","appadingObjImgs","obj","updateItems","page","card","objImg","find","objText","loadCardImage","fetch","then","json","responseData","ok","reject","endSeparateIndex","originalimage","source","lastIndexOf","extract_html","substr","img","size","query","pages","property","Number","isInteger","imageInfo","imageinfo","thumburl","thumbwidth","thumbheight","catch","newScores","some","document","body","addEventListener","handleClickOnScreen","event","path","composedPath","includes","current","console","log","newCard","removeEventListener","currentPageArg","reduce","accamulator","currentValue","exact","TextInput","label","props","useField","field","meta","type","touched","error","MenuGame","setLength","values","setValues","validationObj","initVal","Yup","max","required","inputElems","placeholder","autoComplete","pathname","initialValues","validationSchema","onSubmit","App","component","loadInfo","jsonData","text","extract","loadingInfo","requestId","cardSlice","cards","currentRequestId","store","configureStore","reducer","cardReducer","Boolean","window","hostname","match","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.223c9420.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__32iPj\",\"value\":\"Counter_value__2m04Y\",\"button\":\"Counter_button__24kqA\",\"textbox\":\"Counter_textbox__1Wa_j\",\"asyncButton\":\"Counter_asyncButton__SRTum Counter_button__24kqA\"};","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","export default __webpack_public_path__ + \"static/media/card.0a100dc1.jpg\";","import React from \"react\"\r\nimport ContentLoader from \"react-content-loader\"\r\n\r\nconst CardLoader = ({style}) => {\r\n    return (\r\n    <ContentLoader \r\n      speed={2}\r\n      backgroundColor=\"rgb(77, 51, 50)\"\r\n      foregroundColor=\"#ecebeb\"\r\n      style={{width: \"100%\", height: \"100%\", borderRadius: \"10px\", ...style}}\r\n    >\r\n      <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"700\" height=\"500\" /> \r\n    </ContentLoader>\r\n)}\r\n\r\n  export default CardLoader","import {useEffect, useState, useRef, memo, forwardRef, useImperativeHandle} from 'react'\r\nimport clsx from 'clsx'\r\nimport cardBackground from \"../../assets/card.jpg\"\r\nimport PropTypes from 'prop-types';\r\nimport CardLoader from './CardLoader'\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst Card = forwardRef(({className, name, image, isErrorImage, isView, isViewFront, onClickForScore, onClickForDescription}, ref) => {\r\n\r\n    const dataPositonForImg = image.width < image.height ? \"horizontal\" : \"vertical\";\r\n\r\n    const [isImageError, setIsImgError] = useState(false);\r\n    const [isLoad, setIsLoad] = useState(true);\r\n    const [isClickable, setIsClickable] = useState(true)\r\n\r\n    useEffect(() => { \r\n        if(isErrorImage) {\r\n            setIsLoad(false);\r\n            setIsImgError(true);\r\n        }\r\n    }, [isErrorImage]);\r\n\r\n    const settingLoadImg = (elem) => {\r\n        if (!elem || elem.src === image.url) return;\r\n        elem.src = image.url;\r\n        elem.onload = () => {\r\n            setIsLoad(false);\r\n        }\r\n        elem.onerror = () => { \r\n            setIsLoad(false);\r\n            setIsImgError(true); \r\n        };\r\n    };\r\n\r\n    const cardRef = useRef();\r\n\r\n    return (\r\n    <div className={clsx(\"card\", className)} ref={cardRef}>\r\n    <CSSTransition\r\n        in={isView}\r\n        timeout={{enter: 0, exit: 2000}}\r\n        classNames={{enterDone: \"card__wrapper\", exitActive: \"card__wrapper card__wrapper--hidden-active\", exitDone: \"card__wrapper card__wrapper--hidden\"}}\r\n        onExit={() => setIsClickable(false)}\r\n      >\r\n        <div className={\"card__wrapper\"}>\r\n                <div className={clsx(\"card__back\", isViewFront ? \"card__back--view-front\" : null)} onClick={() => onClickForScore(cardRef)}>\r\n                    <img src={cardBackground} alt=\"cardBackground\" />\r\n                </div>\r\n            <div className={clsx(\"card__front\", isViewFront ? \"card__front--view-front\" : null)} data-position = {dataPositonForImg} onClick={() => isClickable ? onClickForDescription() : null}>\r\n                <CardLoader style = {isLoad ? null : {display: \"none\"}}/>\r\n                <div className={\"card__error\"} style = {isImageError && !isLoad ? null :  {display: \"none\"}}>\r\n                        <h2>{name}</h2>\r\n                        <p>error picture did not load</p>\r\n                </div>\r\n                {image.url ? <img ref = {settingLoadImg} alt={name} style = {!isImageError && !isLoad ? null : {display: \"none\"}} /> : null}\r\n            </div>\r\n        </div>\r\n        </CSSTransition>\r\n    </div>\r\n    )\r\n});\r\n\r\nCard.defaultProps = {isViewFront: false, image: {url: null, width: null, height: null}};\r\n\r\nexport default memo(Card)\r\n\r\n//https://jasonwatmore.com/post/2020/01/27/react-fetch-http-get-request-examples\r\n","import React from 'react'\r\nimport clsx from 'clsx'\r\n\r\nfunction Status({users, currentUserIndex, score, lastPicture}) {\r\n\r\n    const userElems = users?.map((user, index) => {\r\n        return <StatusUser key={index} name={user.name}  score={user.score}  currentUser = {currentUserIndex === index ? true : null} />\r\n    }); \r\n\r\n    return (\r\n        <div className={clsx(\"status\")}>\r\n            <div className=\"status__wrapper\">\r\n                <h2 className=\"status__title\">Статус игры</h2>\r\n                <ul className=\"status__status\">\r\n                    { userElems }\r\n                    <li className=\"status__left\">{score.currentPoints} / {score.allPoints}</li>\r\n                </ul>\r\n                <li>{lastPicture}</li>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StatusUser({name, score, currentUser}) {\r\n    return (\r\n        <li className=\"status__user\">\r\n            <span className={clsx(\"status__name\", currentUser ? \"status__name--current\": null)}>{name}</span>\r\n            <span className={clsx(\"status__score\", currentUser ? \"status__score--current\" : null)}>{score}</span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Status\r\n","import React, {forwardRef} from 'react'\r\nimport clsx from 'clsx'\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst Navigation =  forwardRef(({currentPage, length, onClick}, ref) => {\r\n\r\n\r\n    const items = new Array(length);\r\n    items.fill(null);\r\n\r\n    const itemElems = items.map((item, index) => {\r\n        return (\r\n            <li key={index} className={clsx(\"navigation__item\",  currentPage === index + 1 ? \"navigation__item--active\" : null)} onClick={() => onClick(index + 1)}>\r\n                <Link to={`/game/${index + 1}`}>{index + 1}</Link>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={clsx(\"navigation\")} ref={ref}>\r\n            <div className=\"navigation__wrapper\">\r\n                <h2 className=\"navigation__title\">Перейти</h2>\r\n                <ul className=\"navigation__navigation\">\r\n                    { itemElems }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Navigation\r\n","import {Card, Status, Navigation} from \"../index\";\r\nimport {useEffect, useState, memo, useRef, useImperativeHandle, forwardRef} from \"react\";\r\nimport clsx from 'clsx'\r\n\r\nconst FieldGame = ({items, onMiddleClickForScore, onMiddleClickForDescription }) => {\r\n\r\n    const [viewDescription, setViewDescription] = useState({isView: false});\r\n    \r\n    const cardElems = items.map((item, index) => {\r\n        return (<Card \r\n            key = {index}\r\n            className = \"field-game__card\"\r\n            name = {item.id}\r\n            image = {item.image}\r\n            isViewFront = { item.isViewFront }\r\n            isView = {item.isView}\r\n            onClickForScore = {onMiddleClickForScore(index)}\r\n            onClickForDescription = {() => {\r\n                if (item.isViewFront && item.image) {\r\n                    onMiddleClickForDescription({isView: true, name: item.name, description: item.description, imageUrl: item.image.url});\r\n                }\r\n            }}\r\n        /> );\r\n    });\r\n\r\n    return (\r\n        <div className=\"field-game\">\r\n            <div className={clsx(\"field-game__wrapper-outher\", viewDescription.isView ? \"field-game__wrapper-outher--description\" : null)}>\r\n                <div className=\"field-game__wrapper-internal\"> \r\n                    { cardElems }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FieldGame\r\n","import React from 'react'\r\nimport {forwardRef} from 'react'\r\n\r\nconst Description =  forwardRef(({isView, imageUrl, title, description, onClick}, ref) => {\r\n    return (\r\n        <div className=\"description\" ref={ref} style={{display: isView ? null : \"none\"}}>\r\n            <div className=\"description__wrapper-outher\">\r\n                <div className=\"description__wrapper-internal\">\r\n                    <button className=\"description__button\" onClick={() => onClick()}>[x]</button>\r\n                            <div className=\"description__img\"><img src={imageUrl} alt=\"1\" /></div>\r\n                            <h2 className=\"description__title\">{title}</h2>\r\n                            <span dangerouslySetInnerHTML={{__html: description}} className=\"description__description\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n})\r\n\r\nexport default Description\r\n","import React from 'react'\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nfunction Finish({user, score}) {\r\n    return (\r\n        <div className=\"finish\">\r\n            <div className=\"finish__other-wrapper\">\r\n                <div className=\"finish__inner-text\">\r\n                    <span className=\"finish__winner\">{user} выйграл!!!</span> \r\n                    <span className=\"finish__score\">со счетом {score}</span>\r\n                    <Link to=\"/\" >\r\n                        <button className=\"finish__button\">Перейти в меню</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Finish\r\n","import React, {useState, useEffect, useMemo, memo, useCallback, useLayoutEffect, forwardRef, useImperativeHandle, useRef} from 'react'\r\nimport data from '../assets/data.json'\r\nimport {FieldGame} from '../components/index'\r\nimport randomaizer from './randomizer'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Switch, Route, useParams, useLocation } from 'react-router-dom'\r\nimport {Status, Navigation, Description, Finish} from \"../components/index\";\r\n\r\n\r\nfunction initCardsState(cardLength, fieldLength) {\r\n    const indexArr = randomaizer(cardLength * 2);\r\n    const arr = indexArr.map((item) => {\r\n        const id = (item >= cardLength ? item - cardLength : item) + 1;\r\n        return {\r\n            id: id,\r\n            isViewFront: false,\r\n            isView: true\r\n        }\r\n    }    \r\n    );\r\n\r\n    let fieldArr = [];\r\n    for (let i = 0; i < fieldLength; ++i ) {\r\n        let pathArr = arr.splice(0, cardLength * 2 / fieldLength);\r\n        fieldArr.push(pathArr);\r\n    }\r\n\r\n    return fieldArr;\r\n}\r\n\r\nfunction initScores(_userNames, scoreLength) {\r\n    const userNames = [];\r\n    for(let key in _userNames) {\r\n        userNames.push({name: _userNames[key], score: 0});\r\n    };\r\n    return {users: userNames, currentUserIndex: 0, score: {currentPoints: 0, allPoints: scoreLength}};\r\n}\r\n\r\nfunction Game() {\r\n    const location = useLocation();\r\n\r\n    const [items, setItems] = useState(initCardsState(data.names.length, 5));\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectCards, setSelectCards] = useState([]); \r\n    const [isClickCard, setIsClickCard] = useState(true);\r\n    const [description, setDescription] = useState({});\r\n    const [scores, setScores] = useState(initScores(location?.state?.userNames, data.names.length));\r\n\r\n    const descriptionRef = useRef();\r\n    const navigationRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n            const objImgs = [];\r\n            const objTexts = [];\r\n\r\n            const appadingObjImgs = (obj) => {\r\n                objImgs.push(obj);\r\n                if (objImgs.length === data.names.length) {\r\n                    const newItems = updateItems(objImgs, objTexts);\r\n                    setItems(newItems);\r\n                }\r\n            };\r\n            \r\n\r\n        const updateItems = (objImgs, objTexts) => {\r\n            const newItems = items.map((page) => {\r\n                return page.map((card) => {\r\n                    const objImg = objImgs.find((item) => item.id === card.id || item.id === card.id - data.names.length);\r\n                    const objText = objTexts.find((item) => item.id === card.id || item.id === card.id - data.names.length);\r\n                    const newCard = {...card, ...objImg, ...objText};\r\n                    return newCard;\r\n                });\r\n            });\r\n            return newItems;\r\n        }\r\n\r\n        const loadCardImage = (id) => {\r\n            fetch(`https://ru.wikipedia.org/api/rest_v1/page/summary/${data.names[id - 1]}`)\r\n                .then(async response => {\r\n                    const responseData = await response.json();\r\n                    if (!response.ok) {\r\n                        return Promise.reject();\r\n                    }\r\n                    const endSeparateIndex = responseData.originalimage.source.lastIndexOf(\"/\");\r\n                    objTexts.push({id: id, name: responseData.title, description: responseData.extract_html});\r\n                    return ({\r\n                        name: responseData.originalimage.source.substr(endSeparateIndex + 1),\r\n                        width: responseData.originalimage.width,\r\n                        height: responseData.originalimage.height\r\n                    })})\r\n                .then(img => {\r\n                    const size = img.width > img.height ? \"width\" : \"height\"; \r\n                    fetch(`https://ru.wikipedia.org/w/api.php?origin=*&action=query&format=json&prop=imageinfo&titles=File:${img.name}&iiprop=timestamp%7Cuser%7Curl&iiurl${size}=1280`)\r\n                        .then(async response => {\r\n                            const responseData = await response.json();\r\n                            if (!response.ok) {\r\n                                return Promise.reject();\r\n                            }\r\n                            for (const property in responseData.query.pages) {\r\n                                if (Number.isInteger(Number(property))) {\r\n                                    const imageInfo = responseData.query.pages[property].imageinfo[0];\r\n                                    return {\r\n                                        url: imageInfo.thumburl,\r\n                                        width: imageInfo.thumbwidth,\r\n                                        height: imageInfo.thumbheight,\r\n                                    };\r\n                                }\r\n                            }\r\n                        })\r\n                        .then(img => {\r\n                            appadingObjImgs({id: id, image: img});\r\n                        })\r\n                        .catch(() => {\r\n                            appadingObjImgs({id: id, isErrorImage: false});\r\n                        })\r\n            })\r\n            .catch(() => {\r\n                appadingObjImgs({id: id, isErrorImage: false});\r\n            });\r\n        }\r\n\r\n        for (let i = 1; i < data.names.length + 1; ++i) {\r\n            loadCardImage(i);\r\n        }\r\n    }, [] );\r\n\r\n    useEffect(() => {\r\n        if (selectCards.length === 2) {\r\n            if (selectCards[0].id === selectCards[1].id) {\r\n                const newScores = Object.assign({}, scores);\r\n                newScores.users = newScores.users.map((user, index) => {;\r\n                    if (newScores.currentUserIndex === index){\r\n                        return {...user, score: user.score + 1}\r\n                    }\r\n                    return user;\r\n                });\r\n                newScores.score = Object.assign({}, scores.score);\r\n                ++newScores.score.currentPoints;\r\n                newScores.currentUserIndex = newScores.currentUserIndex === newScores.users.length - 1 ? 0 : newScores.currentUserIndex + 1;\r\n                setScores(newScores);\r\n\r\n                const newItems = items.map((page) => {\r\n                    if (page.some((card) => card.id === selectCards[0].id)) {\r\n                        return page.map((card) => {\r\n                            if (card.id === selectCards[0].id) {\r\n                                return {...card, isView: false};\r\n                            }\r\n                            return card;\r\n                        });\r\n                    };\r\n                    return page;\r\n                });\r\n                setItems(newItems);\r\n                setSelectCards([]);\r\n                return;\r\n            }\r\n            setIsClickCard(false);\r\n            const handleClickOnScreen = (event) => {\r\n                const path = event.path || (event.composedPath && event.composedPath());\r\n                if (!path.includes(selectCards[0].ref.current) && !path.includes(selectCards[1].ref.current) && !path.includes(descriptionRef.current) && !path.includes(navigationRef.current)) {\r\n                    console.log(items);\r\n                    const newItems = items.map((page) => {\r\n                        return page.map((card) => {\r\n                            if (card.id === selectCards[0].id || card.id === selectCards[1].id) {\r\n                                const newCard = Object.assign({}, card);\r\n                                newCard.isViewFront = false;\r\n                                return newCard;\r\n                                }\r\n                            return card;\r\n                        }\r\n                    )\r\n                    });\r\n                    \r\n                    const newScores = Object.assign({}, scores);\r\n                    newScores.score = Object.assign({}, scores.score);\r\n                    newScores.currentUserIndex = newScores.currentUserIndex === newScores.users.length - 1 ? 0 : newScores.currentUserIndex + 1;\r\n                    setScores(newScores);\r\n\r\n                    setIsClickCard(true);\r\n                    setItems(newItems);\r\n                    setSelectCards([]);\r\n                    document.body.removeEventListener(\"click\", handleClickOnScreen);\r\n                }   \r\n            }\r\n            document.body.addEventListener(\"click\", handleClickOnScreen);\r\n        }\r\n    }, [selectCards]); \r\n\r\n    console.log(items);\r\n\r\n    return (\r\n        <>\r\n            <Description { ...description } onClick = {() => setDescription({})} ref={descriptionRef}/>\r\n            <Status users={scores.users} currentUserIndex={scores.currentUserIndex} score={scores.score}/>\r\n            <Navigation currentPage={currentPage} length={items.length} onClick = {(currentPageArg) => setCurrentPage(currentPageArg)} ref={navigationRef}/>\r\n            {scores.score.allPoints === scores.score.currentPoints ? \r\n                (() => {\r\n                    const user = scores.users.reduce((accamulator, currentValue) => {\r\n                        if (currentValue.score > accamulator.score) return currentValue;\r\n                        return accamulator;\r\n                    }, {name: \"\", score: -1});\r\n                    return <Finish user={user.name} score={user.score}/>\r\n                })() :\r\n                null\r\n            }\r\n            <Switch>\r\n                <Route path=\"/game/:id\" exact>\r\n                    <FieldGamePage items={items} setItems={setItems} selectCards={selectCards} setSelectCards={setSelectCards} isClickCard={isClickCard} setIsClickCard={setIsClickCard} setDescription={setDescription}/>\r\n                </Route>\r\n            </Switch> \r\n        </>\r\n    )\r\n}\r\n\r\nconst FieldGamePage =  ({items, setItems, selectCards, setSelectCards, isClickCard, setIsClickCard, setDescription}) => {\r\n    let { id } = useParams();\r\n    const pageNum = id;\r\n\r\n    const pathItems = items[pageNum - 1];\r\n\r\n    return (<FieldGame key={pageNum} items = {pathItems} onMiddleClickForScore = {(index) => (ref) => {\r\n\r\n        if (!isClickCard) {\r\n            setIsClickCard(true);\r\n            return;\r\n        }\r\n\r\n        const newPathItems = pathItems.map((item, innerIndex) => {\r\n            if (innerIndex === index) {\r\n                let newItem = Object.assign(item);\r\n                newItem.isViewFront = !item.isViewFront;\r\n                if (newItem.isViewFront){\r\n                    const newSelectCards = Object.assign([], selectCards);\r\n                    newSelectCards.push({id: item.id, ref: ref});\r\n                    setSelectCards(newSelectCards);\r\n                }\r\n                return newItem;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        const newItems = items.map((pathItems, index) => {\r\n            if (pageNum - 1 === index) return newPathItems;\r\n            return pathItems;\r\n        })\r\n\r\n        setItems(newItems);\r\n    }} \r\n    onMiddleClickForDescription = {(descriptionObj) => {\r\n        setDescription(descriptionObj);\r\n    }}/>);\r\n}\r\n\r\nexport default Game\r\n","//array randomaizer for game\r\nexport default function randomaizer(length) {\r\n    const randIdArr = new Array(length);\r\n    const idArr = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        idArr.push(i + 1);\r\n    }\r\n    for (let i = 0; i < length; ++i) {\r\n        let numRange = length - i;\r\n        const selectIndex = Math.floor(numRange * Math.random());\r\n        const selectNum = idArr.splice(selectIndex, 1)[0];\r\n        randIdArr[i] = selectNum;\r\n    }\r\n\r\n    return randIdArr;\r\n}\r\n","import React, {useState} from 'react'\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nconst TextInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n        <input className = \"form__input\" {...field} {...props} type=\"text\"/>\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"form__error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n  \r\n  // And now we can use these\r\n  const MenuGame = () => {\r\n\r\n    const [length, setLength] = useState(2);\r\n    const [values, setValues] = useState(null);\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n    const validationObj = {};\r\n    const initVal = {};\r\n    for (let i = 0; i < length; ++i) {\r\n      validationObj[`userName${i + 1}`] = Yup.string()\r\n             .max(15, 'Максимальное число символов 15 или меньше')\r\n             .required('Обязательное поле для заполнения!');\r\n      initVal[`userName${i + 1}`] = \"\";\r\n    }\r\n\r\n    const inputElems = new Array(length).fill(null).map((item, index) => {\r\n      return (<TextInput key={index}\r\n        placeholder={`user ${index + 1}`}\r\n        name={`userName${index + 1}`}\r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n      />);\r\n    }); \r\n\r\n    if (values) {\r\n      return <Redirect push to={{\r\n        pathname: '/game/1',\r\n        state: {userNames: values}\r\n      }}\r\n      />\r\n    }  \r\n\r\n    return (\r\n      <>\r\n        <Formik\r\n          initialValues = {initVal}\r\n          validationSchema={ Yup.object(validationObj) }\r\n          onSubmit={(values, action) => {\r\n            setValues(values);\r\n          }\r\n        }\r\n        >\r\n          <div className=\"form\">\r\n            <div className=\"form__wrapper\">\r\n              <Form className=\"form__form\">\r\n\r\n                {inputElems}\r\n\r\n                <div className = \"form__btns\">\r\n                    <button type=\"button\" onClick={() => {\r\n                      if (length === 5) return;\r\n                      const newLength = length + 1;\r\n                      setLength(newLength);\r\n                      }\r\n                    }>+</button>\r\n                    <button type=\"button\" onClick={() => {\r\n                      if (length === 2) return;\r\n                      const newLength = length - 1;\r\n                      setLength(newLength);\r\n                      }\r\n                    }>-</button>\r\n                </div>\r\n\r\n                <button className = \"form__btn-submit\" type=\"submit\">Войти в игру</button>\r\n                </Form>\r\n            </div>\r\n          </div>\r\n        </Formik>\r\n      </>\r\n    );\r\n  };\r\n\r\nexport default MenuGame\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport './App.css';\nimport './layout/main.scss'\nimport {FieldGame} from \"./components/index\"\nimport {Game, MenuGame} from \"./pages/index\"\nimport { Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Switch>\n        <Route path=\"/\" component={MenuGame} exact/>\n        <Route path=\"/game\" component={Game} />\n    </Switch> \n  );\n}\n\nexport default App;\n","export async function loadInfo(id, name) {\r\n\r\n    const response = await fetch(`https://ru.wikipedia.org/api/rest_v1/page/summary/${name}`);\r\n    const jsonData = await response.json();\r\n    const data = {\r\n        id: id,\r\n        title: jsonData.title,\r\n        image: {\r\n            url: jsonData.originalimage.source,\r\n            width: jsonData.originalimage.width,\r\n            height: jsonData.originalimage.height,\r\n        },\r\n        text: jsonData.extract,\r\n    };\r\n\r\n    return data;\r\n}\r\n  ","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { loadInfo } from './loadInfo';\r\n\r\nconst initialState = {\r\n    cards: []  \r\n};\r\n\r\nexport const loadingInfo = createAsyncThunk(\r\n    'card/loadInfo',\r\n    async ({id, name}, {requestId}) => {\r\n      const data = await loadInfo(id, name);\r\n      return data;\r\n    }\r\n);\r\n\r\nexport const cardSlice = createSlice({\r\n    name: \"card\",\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(loadingInfo.pending, (state, action) => {\r\n                state.cards.push({\r\n                    currentRequestId: action.meta.requestId\r\n                });\r\n            })\r\n            .addCase(loadingInfo.fulfilled, (state, action) => {\r\n                state.cards = state.cards.map((item, index) => {\r\n                    if (item.currentRequestId === action.meta.requestId) {\r\n                        return action.payload;\r\n                    }\r\n                    return item;\r\n                });\r\n            })\r\n    }\r\n});\r\n\r\nexport const selectCardInfo = (id) => (state) => state.card.cards[id];\r\n\r\nexport default cardSlice.reducer;\r\n\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\nimport cardReducer from '../components/Card/cardSlice';\n\n// export const store = configureStore({\n//   reducer: {\n//     counter: counterReducer,\n//   },\n// });\n\n\nexport const store = configureStore({\n  reducer: {\n    card: cardReducer,\n  }\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}